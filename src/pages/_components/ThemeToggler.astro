---

---

<div class="flex flex-wrap gap-1 items-center">
  <button
    id="light-theme-button"
    aria-label="Light theme"
    class="theme-button group size-8 flex items-center justify-center rounded-full"
  >
    <svg
      xmlns="http://www.w3.org/2000/svg"
      width="18"
      height="18"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      stroke-width="1.5"
      stroke-linecap="round"
      stroke-linejoin="round"
      class="group-hover:stroke-black dark:group-hover:stroke-zinc-200 stroke-neutral-600 transition-colors duration-300 ease-in-out"
    >
      <circle cx="12" cy="12" r="5"></circle>
      <line x1="12" y1="1" x2="12" y2="3"></line>
      <line x1="12" y1="21" x2="12" y2="23"></line>
      <line x1="4.22" y1="4.22" x2="5.64" y2="5.64"></line>
      <line x1="18.36" y1="18.36" x2="19.78" y2="19.78"></line>
      <line x1="1" y1="12" x2="3" y2="12"></line>
      <line x1="21" y1="12" x2="23" y2="12"></line>
      <line x1="4.22" y1="19.78" x2="5.64" y2="18.36"></line>
      <line x1="18.36" y1="5.64" x2="19.78" y2="4.22"></line>
    </svg>
  </button>

  <button
    id="dark-theme-button"
    aria-label="Dark theme"
    class="theme-button group size-8 flex items-center justify-center rounded-full"
  >
    <svg
      xmlns="http://www.w3.org/2000/svg"
      width="18"
      height="18"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      stroke-width="1.5"
      stroke-linecap="round"
      stroke-linejoin="round"
      class="group-hover:stroke-black dark:group-hover:stroke-zinc-200 stroke-neutral-600 transition-colors duration-300 ease-in-out"
    >
      <path d="M21 12.79A9 9 0 1 1 11.21 3 7 7 0 0 0 21 12.79z"></path>
    </svg>
  </button>

  <button
    id="browser-theme-button"
    aria-label="System theme"
    class="theme-button group size-8 flex items-center justify-center rounded-full"
  >
    <svg
      xmlns="http://www.w3.org/2000/svg"
      width="18"
      height="18"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      stroke-width="1.5"
      stroke-linecap="round"
      stroke-linejoin="round"
      class="group-hover:stroke-black dark:group-hover:stroke-zinc-200 stroke-neutral-600 transition-colors duration-300 ease-in-out"
    >
      <rect x="2" y="3" width="20" height="14" rx="2" ry="2"></rect>
      <line x1="8" y1="21" x2="16" y2="21"></line>
      <line x1="12" y1="17" x2="12" y2="21"></line>
    </svg>
  </button>
</div>

<style>
  html:not([data-theme-source="browser"]):not(.dark) #light-theme-button svg,
  html:not([data-theme-source="browser"]).dark #dark-theme-button svg,
  html[data-theme-source="browser"] #browser-theme-button svg {
    stroke: dodgerblue;
  }
  :not(html[data-theme-source="browser"])
    &&
    :not(html.dark)
    #light-theme-button
    svg,
  html[data-theme-source="browser"] #browser-theme-button svg {
    stroke: dodgerblue;
  }

  .disable-transitions *,
  .disable-transitions *::before,
  .disable-transitions *::after {
    transition: none !important;
  }
</style>

<script>
  const defaultTheme = "light";
  const themeLocalStorageKey = "theme";
  const themeTransitionClass = "disable-transitions";
  const themeCoverageRootEl = document.documentElement;
  const themeCoverageDataAttribute = "data-theme";

  function disableTransitionsTemporarily() {
    themeCoverageRootEl.classList.add(themeTransitionClass);
    // remove after next frame so transitions don't flash
    requestAnimationFrame(() => {
      requestAnimationFrame(() =>
        themeCoverageRootEl.classList.remove(themeTransitionClass)
      );
    });
  }

  const applyTheme = {
    dark: () => {
      disableTransitionsTemporarily();
      themeCoverageRootEl.classList.add("dark");
      themeCoverageRootEl.setAttribute(themeCoverageDataAttribute, "dark");
      localStorage.setItem(themeLocalStorageKey, "dark");
    },
    light: () => {
      disableTransitionsTemporarily();
      themeCoverageRootEl.classList.remove("dark");
      themeCoverageRootEl.setAttribute(themeCoverageDataAttribute, "light");
      localStorage.setItem(themeLocalStorageKey, "light");
    },
  };

  function loadTheme() {
    type Theme = keyof typeof applyTheme;
    const savedTheme = localStorage.getItem(themeLocalStorageKey);

    if (savedTheme === "browser") {
      themeCoverageRootEl.setAttribute(
        themeCoverageDataAttribute + "-source",
        "browser"
      );

      const theme = window.matchMedia("(prefers-color-scheme: dark)").matches
        ? "dark"
        : "light";

      applyTheme[theme]();
      return;
    }

    if (Object.keys(applyTheme).includes(savedTheme || "")) {
      themeCoverageRootEl.setAttribute(
        themeCoverageDataAttribute + "-source",
        "user"
      );

      applyTheme[savedTheme as Theme]();
      return;
    }

    themeCoverageRootEl.setAttribute(
      themeCoverageDataAttribute + "-source",
      "default"
    );
    applyTheme[defaultTheme]();
  }

  let switchesActivated = false;
  const activateSwitches = () => {
    if (switchesActivated) return;
    switchesActivated = true;

    const lightThemeButton = document.getElementById("light-theme-button");
    lightThemeButton?.addEventListener("click", () => {
      applyTheme.light();
      themeCoverageRootEl.setAttribute(
        themeCoverageDataAttribute + "-source",
        "user"
      );
    });

    const darkThemeButton = document.getElementById("dark-theme-button");
    darkThemeButton?.addEventListener("click", () => {
      applyTheme.dark();
      themeCoverageRootEl.setAttribute(
        themeCoverageDataAttribute + "-source",
        "user"
      );
    });

    const browserThemeButton = document.getElementById("browser-theme-button");
    browserThemeButton?.addEventListener("click", () => {
      themeCoverageRootEl.setAttribute(
        themeCoverageDataAttribute + "-source",
        "browser"
      );
      const theme = window.matchMedia("(prefers-color-scheme: dark)").matches;
      if (theme) {
        applyTheme.dark();
      } else {
        applyTheme.light();
      }
    });
  };

  // Listen for OS/browser color-scheme changes. Only react when the user
  // hasn't set an explicit theme (saved value is missing or 'browser').
  const prefersDark = window.matchMedia
    ? window.matchMedia("(prefers-color-scheme: dark)")
    : null;
  /** @type {number} */
  let mqTimer = 0;
  function onPrefersDarkChange() {
    try {
      const saved = localStorage.getItem(themeLocalStorageKey);
      if (saved && saved !== "browser") return; // user explicitly chose light/dark
    } catch (e) {
      // ignore storage errors and proceed
    }

    clearTimeout(mqTimer);
    mqTimer = window.setTimeout(() => {
      // Re-apply theme resolution based on the new system preference
      loadTheme();
    }, 60);
  }

  if (prefersDark) {
    if (typeof prefersDark.addEventListener === "function") {
      prefersDark.addEventListener("change", onPrefersDarkChange);
    } else if (typeof prefersDark.addListener === "function") {
      prefersDark.addListener(onPrefersDarkChange);
    }
  }

  document.addEventListener("DOMContentLoaded", () => {
    loadTheme();
    activateSwitches();
  });

  document.addEventListener("astro:after-swap", () => {
    loadTheme();
    activateSwitches();
  });
</script>
